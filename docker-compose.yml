version: '3.9'

services:

  # https://hub.docker.com/r/confluentinc/cp-kafka/tags
  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION}
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=9101
      EXTRA_ARGS: -javaagent:/opt/jmx-exporter/jmx_prometheus_javaagent-0.17.2.jar=9101:/opt/jmx-exporter/kafka-broker.yml
      TZ: $TZ
    healthcheck:
      test: echo srvr | nc kafka 9092 || exit 1
      interval: 5s
      retries: 10
    volumes:
      - ./monitoring/jmx-exporter:/opt/jmx-exporter
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy

  # https://hub.docker.com/r/confluentinc/cp-zookeeper/tags
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_PLATFORM_VERSION}
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      TZ: $TZ
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      retries: 20

  # https://registry.hub.docker.com/r/confluentinc/cp-schema-registry/tags
  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_PLATFORM_VERSION}
    container_name: schema-registry
    ports:
      - 8081:8081
    healthcheck:
      interval: 5s
      retries: 10
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8081
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:29092"
      TZ: $TZ

  conduktor:
    image: conduktor/conduktor-platform:1.10.4
    hostname: conduktor
    container_name: conduktor
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost/platform/api/modules/health/live"
        ]
      interval: 30s
      start_period: 120s # Leave time for the psql init scripts to run
      timeout: 5s
      retries: 3
    volumes:
      - conduktor_data:/var/conduktor
      - type: bind
        source: "./conduktor/platform-config.yaml"
        target: /opt/conduktor/platform-config.yaml
        read_only: true
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    environment:
      TZ: $TZ
      CDK_LISTENING_PORT: 80
      CDK_IN_CONF_FILE: /opt/conduktor/platform-config.yaml
      KAFKA_BOOTSTRAP_SERVER: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      ORGANISATION_NAME: "default"
      ADMIN_EMAIL: "admin@admin.io"
      ADMIN_PSW: "admin"
      LICENSE_KEY: "your-license-key-here"
    ports:
      - 80:80

volumes:
  conduktor_data: {}
